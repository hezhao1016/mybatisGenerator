<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
    <!--数据库驱动-->
    <classPathEntry location="lib/mysql-connector-java-5.1.46.jar" />

    <!-- MySQL 配置信息 -->
    <context id="mybatisDemoForMysql" targetRuntime="MyBatis3">

        <!-- 自动识别数据库关键字，默认false -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是"双引号，MYSQL默认是`反引号 -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 控制注释 -->
        <commentGenerator>
            <!-- 是否去除所有自动生成的注释文件 -->
            <property name="suppressAllComments" value="true" />
            <!-- 是否去除所有自动生成的文件的时间戳，默认为false -->
            <property name="suppressDate" value="true" />
        </commentGenerator>

        <!-- 数据库链接地址账号密码 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
            connectionURL="jdbc:mysql://127.0.0.1:3306/db_name?characterEncoding=utf8"
            userId="root" password="root" />

        <!--java类型处理器，用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl
            注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；-->
        <javaTypeResolver>
            <!--
            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
            false：默认,
                scale>0;length>18      使用BigDecimal
                scale=0;length[10,18]  使用Long
                scale=0;length[5,9]    使用Integer
                scale=0;length<5       使用Short
            -->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- 生成实体类存放位置 -->
        <javaModelGenerator targetPackage="com.xxx.entity"
            targetProject="src">
            <property name="enableSubPackages" value="true" />
            <property name="trimStrings" value="true" />
        </javaModelGenerator>
        <!-- 生成映射文件存放位置 -->
        <sqlMapGenerator targetPackage="com.xxx.mapping"
            targetProject="src">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>
        <!-- 生成Mapper接口存放位置 -->
       <javaClientGenerator targetPackage="com.xxx.dao"
            type="XMLMAPPER" targetProject="src">
            <property name="enableSubPackages" value="true" />
            <property name="methodNameCalculator" value="extended" />
        </javaClientGenerator>




        <!-- schema对应数据库，tableName对应表名，domainObjectName对应你的javabean类名，以及是否生成相应的example-->
        <table schema="db_name" tableName="table_name" domainObjectName="TableName"
        	enableCountByExample="true" enableUpdateByExample="true"
            enableDeleteByExample="true" enableSelectByExample="true"
            selectByExampleQueryId="true">

            <!--
            generatedKey用于生成生成主键的方法，
            如果设置了该元素，MybatisGenerator会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
            column:主键的列名；
            sqlStatement：要生成的selectKey语句，有以下可选项：
                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()
                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY
                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性

            <generatedKey column="id" sqlStatement="MySql" />
            -->

            <!--
               该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
               比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
               那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是custId,custName等，
               而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；
               注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
               如果使用了columnOverride元素，该属性无效；

           <columnRenamingRule searchString="" replaceString=""/>
            -->


            <!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；column:要重新设置的列名；
                 注意，一个table元素中可以有多个columnOverride元素
            -->
            <columnOverride column="C_USER_ID" property="userId" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <columnOverride column="C_USER_NAME" property="userName"/>

            <!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 column:指定要忽略的列的名字；
                 注意，一个table元素中可以有多个ignoreColumn元素

            <ignoreColumn column="deptId"/>
            -->
        </table>

        <!-- 生成Example相关的代码 -->
        <table schema="db_name" tableName="table_name"
               enableCountByExample="true" enableUpdateByExample="true"
               enableDeleteByExample="true" enableSelectByExample="true"
               selectByExampleQueryId="true"/>

        <!-- 不生成Example相关的代码 -->
        <table schema="db_name" tableName="table_name"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false"/>

    </context>
</generatorConfiguration>
